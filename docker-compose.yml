volumes:
  osm:
  postgis:
  osm-valhalla:

networks:
  db:
  external:
    driver:
      bridge

services:
  osm-setup:
    build:
      context: ./containers/osm-setup/
      dockerfile: Dockerfile
    entrypoint:
      - /usr/bin/bash
      - /app/entrypoint.sh
    volumes:
      - osm:/data/osm

  valhalla:
    tty: true
    stdin_open: true
    image: ghcr.io/gis-ops/docker-valhalla/valhalla:latest
      # entrypoint: /bin/bash
    environment:
      tile_urls: "https://download.geofabrik.de/europe/romania-latest.osm.pbf"
      server_threads: 4
    networks:
      - external
    ports:
      - 8002:8002
    volumes:
      - osm-valhalla:/custom_files
  osrm:
    depends_on:
      osm-setup:
        condition: service_completed_successfully
    entrypoint: /data/entrypoint.sh
    image: osrm/osrm-backend
    restart: unless-stopped
    ports:
      - 5000:5000
    volumes:
      - osm:/data
      - ./containers/osrm/entrypoint.sh:/data/entrypoint.sh

  frontend:
    tty: true
    stdin_open: true
    environment:
      - TZ=${TZ}
    build:
      context: ./containers/react-frontend/
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 8000:3000
    volumes:
      - ./containers/react-frontend/src:/app/src

  postgis:
    container_name: geo-db
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGIS_PASSWORD}
      - POSTGRES_USER=${POSTGIS_USER}
      - POSTGRES_DB=${POSTGIS_DB}
    healthcheck:
      test:
        [
            "CMD-SHELL", "pg_isready -d $POSTGIS_DB -U $POSTGIS_USER"
        ]
      timeout: 5s
      retries: 10
    image: postgis/postgis:16-3.4-alpine
    networks:
      - db
    ports:
      - 127.0.0.1:5432:5432
    restart: always
    volumes:
      - postgis:/var/lib/postgresql/data

  backend:
    build:
      context: ./containers/backend/
      dockerfile: Dockerfile
    depends_on:
      - postgis
    stdin_open: true
    tty: true
    env_file:
      - .env
    networks:
      - db
      - external
    ports:
      - 127.0.0.1:8001:80
    restart: unless-stopped
    command: uvicorn api:app --reload --host 0.0.0.0 --port 80
    volumes:
      # Read-only volume with source code
      - ./containers/backend/src:/app/:ro


